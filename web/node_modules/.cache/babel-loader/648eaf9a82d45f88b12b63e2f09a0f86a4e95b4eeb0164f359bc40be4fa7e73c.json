{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { errorHandler } from '@/utils/RequestUtils';\nimport { login } from '@/api/SystemAPI';\nexport default {\n  data() {\n    return {\n      userForm: {\n        account: '',\n        password: ''\n      },\n      formRules: {\n        email: [{\n          required: true,\n          message: 'Please enter Email',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: 'Please enter Password',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    handleLogin() {\n      this.$refs.userForm.validate(valid => {\n        if (valid) {\n          login(this.userForm.email, this.userForm.password).then(() => {\n            this.$message.success(\"Login success\");\n            this.$router.push('/');\n          }).catch(errorHandler);\n        }\n      });\n    },\n    handleRegister() {\n      this.$router.push('/register');\n    }\n  }\n};","map":{"version":3,"names":["errorHandler","login","data","userForm","account","password","formRules","email","required","message","trigger","methods","handleLogin","$refs","validate","valid","then","$message","success","$router","push","catch","handleRegister"],"sources":["src/views/LoginView.vue"],"sourcesContent":["<template>\r\n    <el-card class=\"box-card\">\r\n        <div slot=\"header\">\r\n            <span>Login</span>\r\n            <el-button slot=\"reference\" style=\"float: right; padding: 3px\" type=\"default\" @click=\"handleRegister()\">Go\r\n                to create</el-button>\r\n        </div>\r\n        <el-row>\r\n            <el-col :span=\"9\">\r\n                <br />\r\n            </el-col>\r\n            <el-col :span=\"6\" class=\"login-form\">\r\n                <h1>Weclome to Project Management</h1>\r\n                <br />\r\n                <el-form :model=\"userForm\" :rules=\"formRules\" ref=\"userForm\" label-width=\"100px\"\r\n                    style=\"margin-bottom: 30px; margin-right: 30px; text-align: left;\">\r\n                    <el-form-item label=\"Email\" prop=\"email\">\r\n                        <el-input v-model=\"userForm.email\" />\r\n                    </el-form-item>\r\n                    <el-form-item label=\"Password\" prop=\"password\">\r\n                        <el-input show-password v-model=\"userForm.password\" />\r\n                    </el-form-item>\r\n                    <el-form-item style=\"text-align: right;\">\r\n                        <el-button type=\"primary\" @click=\"handleLogin()\">Login</el-button>\r\n                    </el-form-item>\r\n                </el-form>\r\n            </el-col>\r\n            <el-col :span=\"9\">\r\n                <br />\r\n            </el-col>\r\n        </el-row>\r\n    </el-card>\r\n</template>\r\n\r\n<script>\r\nimport { errorHandler } from '@/utils/RequestUtils';\r\nimport { login } from '@/api/SystemAPI';\r\nexport default {\r\n    data() {\r\n        return {\r\n            userForm: {\r\n                account: '',\r\n                password: '',\r\n            },\r\n            formRules: {\r\n                email: [{ required: true, message: 'Please enter Email', trigger: 'blur' }],\r\n                password: [{ required: true, message: 'Please enter Password', trigger: 'blur' }],\r\n            },\r\n        };\r\n    },\r\n    methods: {\r\n        handleLogin() {\r\n            this.$refs.userForm.validate(valid => {\r\n                if (valid) {\r\n                    login(this.userForm.email, this.userForm.password)\r\n                        .then(() => {\r\n                            this.$message.success(\"Login success\")\r\n                            this.$router.push('/')\r\n                        })\r\n                        .catch(errorHandler);\r\n                }\r\n            });\r\n        },\r\n        handleRegister() {\r\n            this.$router.push('/register')\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.box-card {\r\n    height: 78vh;\r\n}\r\n\r\n.login-form {\r\n    margin-top: 10vh;\r\n}\r\n</style>"],"mappings":";AAmCA,SAAAA,YAAA;AACA,SAAAC,KAAA;AACA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,OAAA;QACAC,QAAA;MACA;MACAC,SAAA;QACAC,KAAA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAL,QAAA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,YAAA;MACA,KAAAC,KAAA,CAAAV,QAAA,CAAAW,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACAd,KAAA,MAAAE,QAAA,CAAAI,KAAA,OAAAJ,QAAA,CAAAE,QAAA,EACAW,IAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAC,OAAA,CAAAC,IAAA;UACA,GACAC,KAAA,CAAArB,YAAA;QACA;MACA;IACA;IACAsB,eAAA;MACA,KAAAH,OAAA,CAAAC,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}