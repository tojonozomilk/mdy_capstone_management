{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { addGroupMember, removeGroupMember, getGroupMember, removeProjectGroup } from '@/api/FrontAPI';\nimport { errorHandler } from '@/utils/RequestUtils';\nimport { getAllUserId } from '@/api/UserAPI';\nimport { getGroup, saveGroup, deleteGroup } from '@/api/GroupAPI';\nimport { getAllProjectId } from '@/api/ProjectAPI';\nimport UserChat from '@/components/message/UserChat.vue';\nexport default {\n  name: \"ProjectDetail\",\n  components: {\n    UserChat\n  },\n  data() {\n    return {\n      id: 0,\n      name: '',\n      projectId: '',\n      projectList: [],\n      userList: [],\n      memberList: [],\n      selectorList: [],\n      data: {\n        id: null,\n        name: '',\n        adminId: '',\n        projectId: '',\n        createDate: '',\n        amendDate: ''\n      }\n    };\n  },\n  created() {\n    this.id = this.$route.params.id;\n    this.onInit();\n  },\n  methods: {\n    onInit() {\n      getAllProjectId().then(res => {\n        this.projectList = res;\n      }).catch(errorHandler);\n      getAllUserId().then(res => {\n        this.userList = res;\n      }).catch(errorHandler);\n      if (this.id != 0) {\n        getGroup(this.id).then(res => {\n          this.data = res;\n          this.name = res.name;\n          this.projectId = res.projectId;\n          getGroupMember(this.id).then(res => {\n            this.memberList = res;\n            const memberIdList = this.memberList.map(item => item.value);\n            this.selectorList = this.userList.filter(item => !memberIdList.includes(item.value));\n          }).catch(errorHandler);\n        }).catch(errorHandler);\n        return;\n      }\n    },\n    onUpdate(e, field) {\n      this.data[field] = event.target.innerHTML;\n    },\n    onSave() {\n      saveGroup(this.data).then(res => {\n        if (this.id == 0) {\n          this.$router.push('/group/' + res.id);\n          this.id = res.id;\n        }\n        this.$message.success(\"Change saved successfully\");\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    onChangeProject(projectId) {\n      if (!projectId) {\n        removeProjectGroup(this.projectId, this.id).then(() => {\n          this.$message.success(\"Project removed successfully\");\n          this.onInit();\n        }).catch(errorHandler);\n        return;\n      }\n      this.data.projectId = projectId;\n      this.onSave();\n    },\n    onDelete() {\n      deleteGroup(this.data.id).then(() => {\n        this.$message.success(\"Change deleted successfully\");\n        this.$router.push('/groups');\n      }).catch(errorHandler);\n    },\n    onInviteMember(userId) {\n      addGroupMember(this.data.id, userId).then(res => {\n        if (res) {\n          this.$message.success(\"Member added successfully\");\n        } else {\n          this.$message.warning(\"Wait for approve\");\n        }\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    onDeleteMember(userId) {\n      removeGroupMember(this.data.id, userId).then(() => {\n        this.$message.success(\"Member removed successfully\");\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    getEditable() {\n      return this.id == 0 || this.memberList.find(item => item.value == sessionStorage.getItem('userId'));\n    },\n    onCancel() {\n      this.$router.push('/groups');\n    }\n  }\n};","map":{"version":3,"names":["addGroupMember","removeGroupMember","getGroupMember","removeProjectGroup","errorHandler","getAllUserId","getGroup","saveGroup","deleteGroup","getAllProjectId","UserChat","name","components","data","id","projectId","projectList","userList","memberList","selectorList","adminId","createDate","amendDate","created","$route","params","onInit","methods","then","res","catch","memberIdList","map","item","value","filter","includes","onUpdate","e","field","event","target","innerHTML","onSave","$router","push","$message","success","onChangeProject","onDelete","onInviteMember","userId","warning","onDeleteMember","getEditable","find","sessionStorage","getItem","onCancel"],"sources":["src/views/GroupDetailView.vue"],"sourcesContent":["<template>\r\n    <el-card class=\"box-card\">\r\n        <div slot=\"header\" class=\"clearfix\">\r\n            <span>Group Detail</span>\r\n            <el-button slot=\"reference\" style=\"float: right; padding: 3px\" type=\"danger\" @click=\"onCancel\"\r\n                icon=\"el-icon-close\" />\r\n            <el-popconfirm confirm-button-text='yes' cancel-button-text='no' v-if=\"id != 0 && getEditable()\"\r\n                title=\"Are you sure?\" @confirm=\"onDelete\">\r\n                <el-button slot=\"reference\" style=\"float: right; padding: 3px; margin-right: 10px\" type=\"danger\"\r\n                    icon=\"el-icon-delete\" />\r\n            </el-popconfirm>\r\n        </div>\r\n        <el-descriptions column=\"3\">\r\n            <el-descriptions-item label=\"Group Name\">\r\n                <span :contenteditable=\"getEditable()\" class=\"editable\" @blur=\"onSave\" v-html=\"name\"\r\n                    @keydown.enter.prevent @input=\"(e) => onUpdate(e, 'name')\" />\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"Admin\">{{ userList.find(item => item.value === data.adminId)?.label\r\n                }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"Project\">\r\n                <!--  <el-select v-if=\"getEditable()\" v-model=\"data.projectId\" placeholder=\"Please select\" size=\"mini\"\r\n                    @change=\"onChangeProject\" clearable>\r\n                    <el-option v-for=\"project in projectList\" :key=\"project.value\" :label=\"project.label\"\r\n                        :value=\"project.value\" />\r\n                </el-select>\r\n                <span v-else>{{ projectList.find(item => item.value === data.projectId)?.label }} </span> -->\r\n                {{ projectList.find(item => item.value === data.projectId)?.label }}\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"Create Date\">{{ data.createDate }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"Amend Date\">{{ data.amendDate }}</el-descriptions-item>\r\n        </el-descriptions>\r\n        <el-descriptions :colon=\"false\" v-if=\"id != 0\">\r\n            <template slot=\"title\">\r\n                <span>Members</span>\r\n                <el-popover placement=\"bottom\" trigger=\"click\" class=\"invite-selector\">\r\n                    <el-select filterable placeholder=\"Please select member\" @change=\"onInviteMember\">\r\n                        <el-option v-for=\"item in selectorList\" :key=\"item.value\" :label=\"item.label\"\r\n                            :value=\"item.value\">\r\n                        </el-option>\r\n                    </el-select>\r\n                    <el-button slot=\"reference\" type=\"primary\" size=\"mini\" icon=\"el-icon-plus\" plain />\r\n                </el-popover>\r\n            </template>\r\n            <el-descriptions-item>\r\n                <div>\r\n                    <el-tag v-for=\"member in memberList\" :key=\"member.value\" size=\"small\"\r\n                        :closable=\"member.value != data.adminId && getEditable()\"\r\n                        @close=\"() => onDeleteMember(member.value)\" class=\"items-icon\">\r\n                        <UserChat :userId=\"member.value\" :username=\"member.label\" />\r\n                    </el-tag>\r\n                </div>\r\n            </el-descriptions-item>\r\n        </el-descriptions>\r\n    </el-card>\r\n</template>\r\n\r\n<script>\r\nimport { addGroupMember, removeGroupMember, getGroupMember, removeProjectGroup } from '@/api/FrontAPI';\r\nimport { errorHandler } from '@/utils/RequestUtils';\r\nimport { getAllUserId } from '@/api/UserAPI';\r\nimport { getGroup, saveGroup, deleteGroup } from '@/api/GroupAPI';\r\nimport { getAllProjectId } from '@/api/ProjectAPI';\r\nimport UserChat from '@/components/message/UserChat.vue'\r\nexport default {\r\n    name: \"ProjectDetail\",\r\n    components: { UserChat },\r\n    data() {\r\n        return {\r\n            id: 0,\r\n            name: '',\r\n            projectId: '',\r\n            projectList: [],\r\n            userList: [],\r\n            memberList: [],\r\n            selectorList: [],\r\n            data: {\r\n                id: null,\r\n                name: '',\r\n                adminId: '',\r\n                projectId: '',\r\n                createDate: '',\r\n                amendDate: '',\r\n            }\r\n        };\r\n    },\r\n    created() {\r\n        this.id = this.$route.params.id\r\n        this.onInit();\r\n    },\r\n    methods: {\r\n        onInit() {\r\n            getAllProjectId()\r\n                .then(res => {\r\n                    this.projectList = res\r\n                })\r\n                .catch(errorHandler);\r\n            getAllUserId()\r\n                .then(res => {\r\n                    this.userList = res\r\n                })\r\n                .catch(errorHandler);\r\n\r\n            if (this.id != 0) {\r\n                getGroup(this.id)\r\n                    .then((res) => {\r\n                        this.data = res;\r\n                        this.name = res.name;\r\n                        this.projectId = res.projectId;\r\n\r\n                        getGroupMember(this.id)\r\n                            .then(res => {\r\n                                this.memberList = res\r\n                                const memberIdList = this.memberList.map(item => item.value)\r\n                                this.selectorList = this.userList.filter(item => !memberIdList.includes(item.value))\r\n                            })\r\n                            .catch(errorHandler);\r\n                    })\r\n                    .catch(errorHandler)\r\n                return\r\n            }\r\n        },\r\n        onUpdate(e, field) {\r\n            this.data[field] = event.target.innerHTML;\r\n        },\r\n        onSave() {\r\n            saveGroup(this.data)\r\n                .then((res) => {\r\n                    if (this.id == 0) {\r\n                        this.$router.push('/group/' + res.id)\r\n                        this.id = res.id\r\n                    }\r\n                    this.$message.success(\"Change saved successfully\")\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onChangeProject(projectId) {\r\n            if (!projectId) {\r\n                removeProjectGroup(this.projectId, this.id)\r\n                    .then(() => {\r\n                        this.$message.success(\"Project removed successfully\")\r\n                        this.onInit()\r\n                    })\r\n                    .catch(errorHandler)\r\n                return\r\n            }\r\n            this.data.projectId = projectId\r\n            this.onSave()\r\n        },\r\n        onDelete() {\r\n            deleteGroup(this.data.id)\r\n                .then(() => {\r\n                    this.$message.success(\"Change deleted successfully\")\r\n                    this.$router.push('/groups')\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onInviteMember(userId) {\r\n            addGroupMember(this.data.id, userId)\r\n                .then((res) => {\r\n                    if (res) {\r\n                        this.$message.success(\"Member added successfully\")\r\n                    } else {\r\n                        this.$message.warning(\"Wait for approve\")\r\n                    }\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onDeleteMember(userId) {\r\n            removeGroupMember(this.data.id, userId)\r\n                .then(() => {\r\n                    this.$message.success(\"Member removed successfully\")\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n\r\n        },\r\n        getEditable() {\r\n            return this.id == 0 || this.memberList.find(item => item.value == sessionStorage.getItem('userId'))\r\n        },\r\n        onCancel() {\r\n            this.$router.push('/groups')\r\n        }\r\n    },\r\n};\r\n</script>\r\n\r\n<style>\r\n.box-card {\r\n    height: 98%;\r\n}\r\n\r\n.editable {\r\n    background-color: transparent;\r\n    border: none;\r\n    padding: 0;\r\n    outline: none;\r\n}\r\n\r\n.items-icon {\r\n    margin: 5px;\r\n}\r\n\r\n.invite-selector {\r\n    margin-left: 5px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}