{"ast":null,"code":"import { getProjectList } from '@/api/ProjectAPI';\nimport { getProject } from '@/api/ProjectAPI';\nimport { saveProject } from '@/api/ProjectAPI';\nimport { deleteProject } from '@/api/ProjectAPI';\nimport { getAllUserId } from \"@/api/UserAPI\";\nimport ProjectEdit from '@/components/edit/ProjectEdit.vue';\nimport ProjectSearch from '@/components/search/ProjectSearch.vue';\nimport ProjectTable from '@/components/table/ProjectTable.vue';\nimport { errorHandler } from '@/utils/RequestUtils';\nexport default {\n  components: {\n    ProjectEdit,\n    ProjectSearch,\n    ProjectTable\n  },\n  data() {\n    return {\n      open: false,\n      loading: false,\n      title: \"\",\n      options: {\n        allUserId: []\n      },\n      projectForm: {},\n      projectSearchForm: {},\n      projectPageData: {\n        page: 0,\n        size: 0,\n        total: 0,\n        content: []\n      }\n    };\n  },\n  created() {\n    this.fetchProjectData();\n    this.getAllOptions();\n  },\n  methods: {\n    fetchProjectData(page = 1, size = 10) {\n      getProjectList({\n        page,\n        size,\n        ...this.projectSearchForm\n      }).then(res => {\n        this.projectPageData.page = res.page;\n        this.projectPageData.size = res.size;\n        this.projectPageData.total = res.total;\n        this.projectPageData.content = res.content;\n      }).catch(errorHandler);\n    },\n    resetProjectSearchForm() {\n      this.projectSearchForm = {};\n    },\n    showAddProject() {\n      this.projectForm = {};\n      this.open = true;\n      this.title = \"Add Project\";\n    },\n    showEditProject(id) {\n      getProject(id).then(res => {\n        this.projectForm = {\n          ...res\n        };\n        this.open = true;\n        this.title = \"Edit Project\";\n      }).catch(errorHandler);\n    },\n    handleSaveProject() {\n      saveProject(this.projectForm).then(() => {\n        this.open = false;\n        this.$message.success(\"Project saved successfully\");\n        this.fetchProjectData();\n      }).catch(errorHandler);\n    },\n    handleDeleteProject(id) {\n      deleteProject(id).then(() => {\n        this.$message.success(\"Project deleted successfully\");\n        this.fetchProjectData();\n      }).catch(errorHandler);\n    },\n    getAllOptions() {\n      getAllUserId().then(res => {\n        this.options.allUserId = res;\n      }).catch(errorHandler);\n    }\n  }\n};","map":{"version":3,"names":["getProjectList","getProject","saveProject","deleteProject","getAllUserId","ProjectEdit","ProjectSearch","ProjectTable","errorHandler","components","data","open","loading","title","options","allUserId","projectForm","projectSearchForm","projectPageData","page","size","total","content","created","fetchProjectData","getAllOptions","methods","then","res","catch","resetProjectSearchForm","showAddProject","showEditProject","id","handleSaveProject","$message","success","handleDeleteProject"],"sources":["src/views/admin/ProjectView.vue"],"sourcesContent":["<template>\n    <div>\n        <!-- Project搜索栏 -->\n        <ProjectSearch :form=\"projectSearchForm\" :options=\"options\" :onSearch=\"fetchProjectData\"\n\t\t:onReset=\"resetProjectSearchForm\" :onAdd=\"showAddProject\" />\n\n        <!-- Project列表 -->\n        <ProjectTable :loading=\"loading\" :options=\"options\" :pageData=\"projectPageData\" :onEdit=\"showEditProject\"\n            :onFetchData=\"fetchProjectData\" :onDelete=\"handleDeleteProject\" />\n\n        <!-- 新增/编辑Project的弹出框 -->\n        <el-dialog :title=\"title\" width=\"30%\" :visible.sync=\"open\">\n            <ProjectEdit :form=\"projectForm\" :options=\"options\" :onSubmit=\"handleSaveProject\" />\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport { getProjectList } from '@/api/ProjectAPI';\nimport { getProject } from '@/api/ProjectAPI';\nimport { saveProject } from '@/api/ProjectAPI';\nimport { deleteProject } from '@/api/ProjectAPI';\nimport { getAllUserId } from \"@/api/UserAPI\";\nimport ProjectEdit from '@/components/edit/ProjectEdit.vue';\nimport ProjectSearch from '@/components/search/ProjectSearch.vue';\nimport ProjectTable from '@/components/table/ProjectTable.vue';\nimport { errorHandler } from '@/utils/RequestUtils';\nexport default {\n    components: {\n        ProjectEdit,\n        ProjectSearch,\n        ProjectTable\n    },\n    data() {\n        return {\n            open: false,\n            loading: false,\n            title: \"\",\n            options: {\n                allUserId: [],\n            },\n            projectForm: {},\n            projectSearchForm: {},\n            projectPageData: {\n                page: 0,\n                size: 0,\n                total: 0,\n                content: [],\n            },\n        };\n    },\n    created() {\n        this.fetchProjectData();\n        this.getAllOptions();\n    },\n    methods: {\n        fetchProjectData(page = 1, size = 10) {\n            getProjectList({ page, size, ...this.projectSearchForm })\n                .then(res => {\n                    this.projectPageData.page = res.page;\n                    this.projectPageData.size = res.size;\n                    this.projectPageData.total = res.total;\n                    this.projectPageData.content = res.content;\n                })\n                .catch(errorHandler);\n        },\n        resetProjectSearchForm() {\n            this.projectSearchForm = {}\n        },\n        showAddProject() {\n            this.projectForm = {};\n            this.open = true;\n            this.title = \"Add Project\"\n        },\n        showEditProject(id) {\n            getProject(id)\n                .then(res => {\n                    this.projectForm = { ...res };\n                    this.open = true;\n                    this.title = \"Edit Project\"\n                })\n                .catch(errorHandler);\n        },\n        handleSaveProject() {\n            saveProject(this.projectForm)\n                .then(() => {\n                    this.open = false;\n                    this.$message.success(\"Project saved successfully\")\n                    this.fetchProjectData();\n                })\n                .catch(errorHandler);\n        },\n        handleDeleteProject(id) {\n            deleteProject(id)\n                .then(() => {\n                    this.$message.success(\"Project deleted successfully\")\n                    this.fetchProjectData();\n                })\n                .catch(errorHandler);\n        },\n        getAllOptions() {\n            getAllUserId()\n                .then(res => {\n                    this.options.allUserId = res\n                })\n                .catch(errorHandler);\n        }\n    }\n};\n</script>"],"mappings":"AAkBA,SAAAA,cAAA;AACA,SAAAC,UAAA;AACA,SAAAC,WAAA;AACA,SAAAC,aAAA;AACA,SAAAC,YAAA;AACA,OAAAC,WAAA;AACA,OAAAC,aAAA;AACA,OAAAC,YAAA;AACA,SAAAC,YAAA;AACA;EACAC,UAAA;IACAJ,WAAA;IACAC,aAAA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,IAAA;MACAC,OAAA;MACAC,KAAA;MACAC,OAAA;QACAC,SAAA;MACA;MACAC,WAAA;MACAC,iBAAA;MACAC,eAAA;QACAC,IAAA;QACAC,IAAA;QACAC,KAAA;QACAC,OAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAF,iBAAAL,IAAA,MAAAC,IAAA;MACApB,cAAA;QAAAmB,IAAA;QAAAC,IAAA;QAAA,QAAAH;MAAA,GACAU,IAAA,CAAAC,GAAA;QACA,KAAAV,eAAA,CAAAC,IAAA,GAAAS,GAAA,CAAAT,IAAA;QACA,KAAAD,eAAA,CAAAE,IAAA,GAAAQ,GAAA,CAAAR,IAAA;QACA,KAAAF,eAAA,CAAAG,KAAA,GAAAO,GAAA,CAAAP,KAAA;QACA,KAAAH,eAAA,CAAAI,OAAA,GAAAM,GAAA,CAAAN,OAAA;MACA,GACAO,KAAA,CAAArB,YAAA;IACA;IACAsB,uBAAA;MACA,KAAAb,iBAAA;IACA;IACAc,eAAA;MACA,KAAAf,WAAA;MACA,KAAAL,IAAA;MACA,KAAAE,KAAA;IACA;IACAmB,gBAAAC,EAAA;MACAhC,UAAA,CAAAgC,EAAA,EACAN,IAAA,CAAAC,GAAA;QACA,KAAAZ,WAAA;UAAA,GAAAY;QAAA;QACA,KAAAjB,IAAA;QACA,KAAAE,KAAA;MACA,GACAgB,KAAA,CAAArB,YAAA;IACA;IACA0B,kBAAA;MACAhC,WAAA,MAAAc,WAAA,EACAW,IAAA;QACA,KAAAhB,IAAA;QACA,KAAAwB,QAAA,CAAAC,OAAA;QACA,KAAAZ,gBAAA;MACA,GACAK,KAAA,CAAArB,YAAA;IACA;IACA6B,oBAAAJ,EAAA;MACA9B,aAAA,CAAA8B,EAAA,EACAN,IAAA;QACA,KAAAQ,QAAA,CAAAC,OAAA;QACA,KAAAZ,gBAAA;MACA,GACAK,KAAA,CAAArB,YAAA;IACA;IACAiB,cAAA;MACArB,YAAA,GACAuB,IAAA,CAAAC,GAAA;QACA,KAAAd,OAAA,CAAAC,SAAA,GAAAa,GAAA;MACA,GACAC,KAAA,CAAArB,YAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}