{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { saveUser, getUser } from '@/api/UserAPI';\nimport { getUserInfo, getMessages, sendMessage } from '@/api/FrontAPI';\nimport MessageBox from '@/components/message/MessageBox.vue';\nimport { errorHandler } from '@/utils/RequestUtils';\nexport default {\n  components: {\n    MessageBox\n  },\n  data() {\n    return {\n      me: {},\n      contact: {},\n      messageList: []\n    };\n  },\n  created() {\n    this.me.userId = sessionStorage.getItem(\"userId\");\n    this.me.username = sessionStorage.getItem(\"username\");\n    this.me.avatar = sessionStorage.getItem(\"avatar\");\n    const receiverId = this.$route.params.id;\n    getUserInfo(receiverId).then(res => {\n      this.contact = res;\n      this.getMessageList();\n    }).catch(errorHandler);\n  },\n  methods: {\n    fetchUserData() {\n      getUser(this.id).then(res => {\n        this.userForm = res;\n      }).catch(errorHandler);\n    },\n    handleSaveUser() {\n      saveUser(this.userForm).then(() => {\n        this.$message.success(\"Profile saved successfully\");\n        this.fetchUserData();\n      }).catch(errorHandler);\n    },\n    onClose() {\n      this.$router.push('/');\n    },\n    getMessageList(minId) {\n      getMessages(this.contact.userId, minId).then(res => {\n        const ids = this.messageList.map(message => message.id);\n        for (const message of res) {\n          const id = message.id;\n          if (ids.includes(id)) {\n            continue;\n          }\n          const sentByMe = message.senderId == this.me.userId;\n          message.avatar = sentByMe ? this.me.avatar : this.contact.avatar;\n          message.avatar = `http://localhost:8080${message.avatar}`;\n          message.sentByMe = sentByMe;\n          let insert = false;\n          for (let i = 0; i < this.messageList.length; i++) {\n            if (this.messageList[i].id > id) {\n              this.messageList.splice(i, 0, message);\n              insert = true;\n              break;\n            }\n          }\n          if (!insert) {\n            this.messageList.push(message);\n          }\n        }\n        setTimeout(() => {\n          this.timer = setTimeout(() => {\n            this.getMessageList();\n          }, 500);\n        }, 500);\n      }).catch(errorHandler);\n    },\n    onSendMessage(content) {\n      const message = {\n        \"type\": \"Chat\",\n        \"content\": content,\n        \"senderId\": this.me.userId,\n        \"receiverId\": this.contact.userId,\n        \"isRead\": false\n      };\n      sendMessage(message).catch(errorHandler);\n    }\n  },\n  beforeDestroy() {\n    clearTimeout(this.timer);\n  }\n};","map":{"version":3,"names":["saveUser","getUser","getUserInfo","getMessages","sendMessage","MessageBox","errorHandler","components","data","me","contact","messageList","created","userId","sessionStorage","getItem","username","avatar","receiverId","$route","params","id","then","res","getMessageList","catch","methods","fetchUserData","userForm","handleSaveUser","$message","success","onClose","$router","push","minId","ids","map","message","includes","sentByMe","senderId","insert","i","length","splice","setTimeout","timer","onSendMessage","content","beforeDestroy","clearTimeout"],"sources":["src/views/ChatView.vue"],"sourcesContent":["<template>\r\n    <el-card class=\"lsit-card\">\r\n        <div slot=\"header\" class=\"clearfix\">\r\n            <span>Chat with {{ `${contact.username}(${contact.email})` }}</span>\r\n            <el-button slot=\"reference\" style=\"float: right; padding: 3px\" type=\"danger\" icon=\"el-icon-close\"\r\n                @click=\"onClose\" />\r\n        </div>\r\n        <MessageBox :messageList=\"messageList\" :onSendMessage=\"onSendMessage\" :onLoadMessage=\"getMessageList\" />\r\n    </el-card>\r\n</template>\r\n\r\n<script>\r\nimport { saveUser, getUser } from '@/api/UserAPI';\r\nimport { getUserInfo, getMessages, sendMessage } from '@/api/FrontAPI';\r\nimport MessageBox from '@/components/message/MessageBox.vue';\r\nimport { errorHandler } from '@/utils/RequestUtils';\r\nexport default {\r\n    components: {\r\n        MessageBox,\r\n    },\r\n    data() {\r\n        return {\r\n            me: {},\r\n            contact: {},\r\n            messageList: [],\r\n        };\r\n    },\r\n    created() {\r\n        this.me.userId = sessionStorage.getItem(\"userId\")\r\n        this.me.username = sessionStorage.getItem(\"username\")\r\n        this.me.avatar = sessionStorage.getItem(\"avatar\")\r\n\r\n        const receiverId = this.$route.params.id\r\n        getUserInfo(receiverId)\r\n            .then((res) => {\r\n                this.contact = res\r\n                this.getMessageList()\r\n            })\r\n            .catch(errorHandler);\r\n    },\r\n    methods: {\r\n        fetchUserData() {\r\n            getUser(this.id)\r\n                .then((res) => {\r\n                    this.userForm = res\r\n                })\r\n                .catch(errorHandler);\r\n        },\r\n        handleSaveUser() {\r\n            saveUser(this.userForm)\r\n                .then(() => {\r\n                    this.$message.success(\"Profile saved successfully\")\r\n                    this.fetchUserData();\r\n                })\r\n                .catch(errorHandler);\r\n        },\r\n        onClose() {\r\n            this.$router.push('/')\r\n        },\r\n        getMessageList(minId) {\r\n            getMessages(this.contact.userId, minId)\r\n                .then((res) => {\r\n                    const ids = this.messageList.map(message => message.id)\r\n\r\n                    for (const message of res) {\r\n                        const id = message.id\r\n                        if (ids.includes(id)) {\r\n                            continue;\r\n                        }\r\n\r\n                        const sentByMe = message.senderId == this.me.userId\r\n                        message.avatar = sentByMe ? this.me.avatar : this.contact.avatar\r\n                        message.avatar = `http://localhost:8080${message.avatar}`\r\n                        message.sentByMe = sentByMe;\r\n\r\n                        let insert = false;\r\n                        for (let i = 0; i < this.messageList.length; i++) {\r\n                            if (this.messageList[i].id > id) {\r\n                                this.messageList.splice(i, 0, message);\r\n                                insert = true;\r\n                                break\r\n                            }\r\n                        }\r\n                        if (!insert) {\r\n                            this.messageList.push(message)\r\n                        }\r\n                    }\r\n                    setTimeout(() => {\r\n                        this.timer = setTimeout(() => {\r\n                            this.getMessageList();\r\n                        }, 500);\r\n                    }, 500);\r\n                })\r\n                .catch(errorHandler);\r\n        },\r\n        onSendMessage(content) {\r\n            const message = {\r\n                \"type\": \"Chat\",\r\n                \"content\": content,\r\n                \"senderId\": this.me.userId,\r\n                \"receiverId\": this.contact.userId,\r\n                \"isRead\": false,\r\n            }\r\n            sendMessage(message)\r\n                .catch(errorHandler);\r\n        },\r\n    },\r\n    beforeDestroy() {\r\n        clearTimeout(this.timer);\r\n    },\r\n};\r\n</script>"],"mappings":";AAYA,SAAAA,QAAA,EAAAC,OAAA;AACA,SAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA;AACA,OAAAC,UAAA;AACA,SAAAC,YAAA;AACA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,EAAA;MACAC,OAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAH,EAAA,CAAAI,MAAA,GAAAC,cAAA,CAAAC,OAAA;IACA,KAAAN,EAAA,CAAAO,QAAA,GAAAF,cAAA,CAAAC,OAAA;IACA,KAAAN,EAAA,CAAAQ,MAAA,GAAAH,cAAA,CAAAC,OAAA;IAEA,MAAAG,UAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;IACAnB,WAAA,CAAAgB,UAAA,EACAI,IAAA,CAAAC,GAAA;MACA,KAAAb,OAAA,GAAAa,GAAA;MACA,KAAAC,cAAA;IACA,GACAC,KAAA,CAAAnB,YAAA;EACA;EACAoB,OAAA;IACAC,cAAA;MACA1B,OAAA,MAAAoB,EAAA,EACAC,IAAA,CAAAC,GAAA;QACA,KAAAK,QAAA,GAAAL,GAAA;MACA,GACAE,KAAA,CAAAnB,YAAA;IACA;IACAuB,eAAA;MACA7B,QAAA,MAAA4B,QAAA,EACAN,IAAA;QACA,KAAAQ,QAAA,CAAAC,OAAA;QACA,KAAAJ,aAAA;MACA,GACAF,KAAA,CAAAnB,YAAA;IACA;IACA0B,QAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;IACAV,eAAAW,KAAA;MACAhC,WAAA,MAAAO,OAAA,CAAAG,MAAA,EAAAsB,KAAA,EACAb,IAAA,CAAAC,GAAA;QACA,MAAAa,GAAA,QAAAzB,WAAA,CAAA0B,GAAA,CAAAC,OAAA,IAAAA,OAAA,CAAAjB,EAAA;QAEA,WAAAiB,OAAA,IAAAf,GAAA;UACA,MAAAF,EAAA,GAAAiB,OAAA,CAAAjB,EAAA;UACA,IAAAe,GAAA,CAAAG,QAAA,CAAAlB,EAAA;YACA;UACA;UAEA,MAAAmB,QAAA,GAAAF,OAAA,CAAAG,QAAA,SAAAhC,EAAA,CAAAI,MAAA;UACAyB,OAAA,CAAArB,MAAA,GAAAuB,QAAA,QAAA/B,EAAA,CAAAQ,MAAA,QAAAP,OAAA,CAAAO,MAAA;UACAqB,OAAA,CAAArB,MAAA,2BAAAqB,OAAA,CAAArB,MAAA;UACAqB,OAAA,CAAAE,QAAA,GAAAA,QAAA;UAEA,IAAAE,MAAA;UACA,SAAAC,CAAA,MAAAA,CAAA,QAAAhC,WAAA,CAAAiC,MAAA,EAAAD,CAAA;YACA,SAAAhC,WAAA,CAAAgC,CAAA,EAAAtB,EAAA,GAAAA,EAAA;cACA,KAAAV,WAAA,CAAAkC,MAAA,CAAAF,CAAA,KAAAL,OAAA;cACAI,MAAA;cACA;YACA;UACA;UACA,KAAAA,MAAA;YACA,KAAA/B,WAAA,CAAAuB,IAAA,CAAAI,OAAA;UACA;QACA;QACAQ,UAAA;UACA,KAAAC,KAAA,GAAAD,UAAA;YACA,KAAAtB,cAAA;UACA;QACA;MACA,GACAC,KAAA,CAAAnB,YAAA;IACA;IACA0C,cAAAC,OAAA;MACA,MAAAX,OAAA;QACA;QACA,WAAAW,OAAA;QACA,iBAAAxC,EAAA,CAAAI,MAAA;QACA,mBAAAH,OAAA,CAAAG,MAAA;QACA;MACA;MACAT,WAAA,CAAAkC,OAAA,EACAb,KAAA,CAAAnB,YAAA;IACA;EACA;EACA4C,cAAA;IACAC,YAAA,MAAAJ,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}