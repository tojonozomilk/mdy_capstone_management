{"ast":null,"code":"export default {\n  props: {\n    messageList: Array,\n    onSendMessage: Function,\n    onLoadMessage: Function\n  },\n  data() {\n    return {\n      newMessage: ''\n    };\n  },\n  watch: {\n    messageList() {\n      this.scrollToBottom();\n    }\n  },\n  methods: {\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messageContainer;\n        container.scrollTop = container.scrollHeight;\n      });\n    },\n    handleScroll() {\n      const container = this.$refs.messageContainer;\n      if (container.scrollTop === 0) {\n        const mixMessage = this.messageList?.[0];\n        if (mixMessage) {\n          this.onLoadMessage(mixMessage.id);\n        }\n      }\n    },\n    sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        this.onSendMessage(this.newMessage);\n        this.newMessage = '';\n        this.scrollToBottom();\n      }\n    },\n    getTimeAlignment(sentByMe) {\n      return sentByMe ? 'time-right' : 'time-left';\n    }\n  }\n};","map":{"version":3,"names":["props","messageList","Array","onSendMessage","Function","onLoadMessage","data","newMessage","watch","scrollToBottom","methods","$nextTick","container","$refs","messageContainer","scrollTop","scrollHeight","handleScroll","mixMessage","id","sendMessage","trim","getTimeAlignment","sentByMe"],"sources":["src/components/message/MessageBox.vue"],"sourcesContent":["<template>\r\n    <div class=\"chat-container\">\r\n        <div class=\"chat-messages\" ref=\"messageContainer\" @scroll=\"handleScroll\">\r\n            <div v-for=\"message in messageList\" :key=\"message.id\" class=\"message\"\r\n                :class=\"{ 'message-sent': message.sentByMe }\">\r\n                <div class=\"avatar-container\" v-if=\"!message.sentByMe\">\r\n                    <el-avatar :src=\"message.avatar\" :size=\"40\" class=\"message-avatar\"></el-avatar>\r\n                </div>\r\n                <div class=\"message-content\" :class=\"getTimeAlignment(message.sentByMe)\">\r\n                    <div class=\"message-text\">{{ message.content }}</div>\r\n                    <div class=\"message-time\">{{ message.createDate }}</div>\r\n                </div>\r\n                <div class=\"avatar-container\" v-if=\"message.sentByMe\">\r\n                    <el-avatar :src=\"message.avatar\" :size=\"40\" class=\"message-avatar\"></el-avatar>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"chat-input\">\r\n            <el-input v-model=\"newMessage\" placeholder=\"Please enter text message\"\r\n                @keyup.enter.native=\"sendMessage\"></el-input>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        messageList: Array,\r\n        onSendMessage: Function,\r\n        onLoadMessage: Function,\r\n    },\r\n    data() {\r\n        return {\r\n            newMessage: ''\r\n        };\r\n    },\r\n    watch: {\r\n        messageList() {\r\n            this.scrollToBottom();\r\n        }\r\n    },\r\n    methods: {\r\n        scrollToBottom() {\r\n            this.$nextTick(() => {\r\n                const container = this.$refs.messageContainer;\r\n                container.scrollTop = container.scrollHeight;\r\n            });\r\n        },\r\n        handleScroll() {\r\n            const container = this.$refs.messageContainer;\r\n            if (container.scrollTop === 0) {\r\n                const mixMessage = this.messageList?.[0]\r\n                if (mixMessage) {\r\n                    this.onLoadMessage(mixMessage.id)\r\n                }\r\n            }\r\n        },\r\n        sendMessage() {\r\n            if (this.newMessage.trim() !== '') {\r\n                this.onSendMessage(this.newMessage)\r\n                this.newMessage = '';\r\n                this.scrollToBottom();\r\n            }\r\n        },\r\n        getTimeAlignment(sentByMe) {\r\n            return sentByMe ? 'time-right' : 'time-left';\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n    padding: 30px;\r\n    height: 68vh !important;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.chat-messages {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n}\r\n\r\n.message {\r\n    display: flex;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.message-sent {\r\n    justify-content: flex-end;\r\n}\r\n\r\n.avatar-container {\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.message-avatar {\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n}\r\n\r\n.message-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.message-text {\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.message-time {\r\n    font-size: 10px;\r\n    color: #999;\r\n    margin-top: 5px;\r\n}\r\n\r\n.time-left {\r\n    align-items: start;\r\n}\r\n\r\n.time-right {\r\n    align-items: end;\r\n}\r\n\r\n.chat-input {\r\n    margin-top: 20px;\r\n}\r\n</style>"],"mappings":"AAyBA;EACAA,KAAA;IACAC,WAAA,EAAAC,KAAA;IACAC,aAAA,EAAAC,QAAA;IACAC,aAAA,EAAAD;EACA;EACAE,KAAA;IACA;MACAC,UAAA;IACA;EACA;EACAC,KAAA;IACAP,YAAA;MACA,KAAAQ,cAAA;IACA;EACA;EACAC,OAAA;IACAD,eAAA;MACA,KAAAE,SAAA;QACA,MAAAC,SAAA,QAAAC,KAAA,CAAAC,gBAAA;QACAF,SAAA,CAAAG,SAAA,GAAAH,SAAA,CAAAI,YAAA;MACA;IACA;IACAC,aAAA;MACA,MAAAL,SAAA,QAAAC,KAAA,CAAAC,gBAAA;MACA,IAAAF,SAAA,CAAAG,SAAA;QACA,MAAAG,UAAA,QAAAjB,WAAA;QACA,IAAAiB,UAAA;UACA,KAAAb,aAAA,CAAAa,UAAA,CAAAC,EAAA;QACA;MACA;IACA;IACAC,YAAA;MACA,SAAAb,UAAA,CAAAc,IAAA;QACA,KAAAlB,aAAA,MAAAI,UAAA;QACA,KAAAA,UAAA;QACA,KAAAE,cAAA;MACA;IACA;IACAa,iBAAAC,QAAA;MACA,OAAAA,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}