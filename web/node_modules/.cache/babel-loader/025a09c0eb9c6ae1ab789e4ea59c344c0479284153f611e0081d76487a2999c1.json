{"ast":null,"code":"const {\n  request,\n  responseHandler\n} = require(\"../utils/RequestUtils\");\nconst requestMapping = \"/api\";\n\n/**\n * Get Project detail by id\n * @param id\n * @returns Project\n */\nexport const getProjectDetail = async id => {\n  return request.get(requestMapping + \"/projectDetail\", {\n    params: {\n      id\n    }\n  }).then(responseHandler);\n};\n\n/**\n * Update Project\n * @param body\n * @returns Project\n */\nexport const saveProjectDetail = async body => {\n  return request.post(requestMapping + \"/projectDetail\", body).then(responseHandler);\n};\nexport const addProjectManager = async (projectId, managerId) => {\n  return request.get(requestMapping + \"/addProjectManager\", {\n    params: {\n      projectId,\n      managerId\n    }\n  }).then(responseHandler);\n};\nexport const addProjectGroup = async (projectId, groupId) => {\n  return request.get(requestMapping + \"/addProjectGroup\", {\n    params: {\n      projectId,\n      groupId\n    }\n  }).then(responseHandler);\n};\nexport const removeProjectManager = async (projectId, managerId) => {\n  return request.delete(requestMapping + \"/removeProjectManager\", {\n    params: {\n      projectId,\n      managerId\n    }\n  }).then(responseHandler);\n};\nexport const removeProjectGroup = async (projectId, groupId) => {\n  return request.delete(requestMapping + \"/removeProjectGroup\", {\n    params: {\n      projectId,\n      groupId\n    }\n  }).then(responseHandler);\n};\nexport const getAvailableGroup = async () => {\n  return request.get(requestMapping + \"/getAvailableGroup\").then(responseHandler);\n};\nexport const getGroupMember = async groupId => {\n  return request.get(requestMapping + \"/getGroupMember\", {\n    params: {\n      groupId\n    }\n  }).then(responseHandler);\n};\nexport const addGroupMember = async (groupId, userId) => {\n  return request.get(requestMapping + \"/addGroupMember\", {\n    params: {\n      groupId,\n      userId\n    }\n  }).then(responseHandler);\n};\nexport const removeGroupMember = async (groupId, userId) => {\n  return request.delete(requestMapping + \"/removeGroupMember\", {\n    params: {\n      groupId,\n      userId\n    }\n  }).then(responseHandler);\n};\nexport const getSummary = async () => {\n  return request.get(requestMapping + \"/getSummary\").then(responseHandler);\n};\nexport const getMyApproval = async query => {\n  return request.get(requestMapping + \"/getMyApproval\", {\n    params: {\n      ...query\n    }\n  }).then(responseHandler);\n};\nexport const approve = async approvalId => {\n  return request.get(requestMapping + \"/approve\", {\n    params: {\n      approvalId\n    }\n  }).then(responseHandler);\n};\nexport const reject = async approvalId => {\n  return request.get(requestMapping + \"/reject\", {\n    params: {\n      approvalId\n    }\n  }).then(responseHandler);\n};\nexport const readNotification = async messageId => {\n  return request.get(requestMapping + \"/readNotification\", {\n    params: {\n      messageId\n    }\n  }).then(responseHandler);\n};\nexport const getNotifications = async () => {\n  return request.get(requestMapping + \"/getNotifications\").then(responseHandler);\n};\nexport const getMessages = async (senderId, minId) => {\n  return request.get(requestMapping + \"/getMessages\", {\n    params: {\n      senderId,\n      minId\n    }\n  }).then(responseHandler);\n};\nexport const sendMessage = async message => {\n  return request.post(requestMapping + \"/sendMessage\", message).then(responseHandler);\n};\nexport const getUserInfo = async userId => {\n  return request.get(requestMapping + \"/getUserInfo\", {\n    params: {\n      userId\n    }\n  }).then(responseHandler);\n};","map":{"version":3,"names":["request","responseHandler","require","requestMapping","getProjectDetail","id","get","params","then","saveProjectDetail","body","post","addProjectManager","projectId","managerId","addProjectGroup","groupId","removeProjectManager","delete","removeProjectGroup","getAvailableGroup","getGroupMember","addGroupMember","userId","removeGroupMember","getSummary","getMyApproval","query","approve","approvalId","reject","readNotification","messageId","getNotifications","getMessages","senderId","minId","sendMessage","message","getUserInfo"],"sources":["D:/8543/9900/project/web/src/api/FrontAPI.js"],"sourcesContent":["const { request, responseHandler } = require(\"../utils/RequestUtils\");\n\nconst requestMapping = \"/api\";\n\n/**\n * Get Project detail by id\n * @param id\n * @returns Project\n */\nexport const getProjectDetail = async (id) => {\n  return request\n    .get(requestMapping + \"/projectDetail\", { params: { id } })\n    .then(responseHandler);\n};\n\n/**\n * Update Project\n * @param body\n * @returns Project\n */\nexport const saveProjectDetail = async (body) => {\n  return request\n    .post(requestMapping + \"/projectDetail\", body)\n    .then(responseHandler);\n};\n\nexport const addProjectManager = async (projectId, managerId) => {\n  return request\n    .get(requestMapping + \"/addProjectManager\", {\n      params: { projectId, managerId },\n    })\n    .then(responseHandler);\n};\n\nexport const addProjectGroup = async (projectId, groupId) => {\n  return request\n    .get(requestMapping + \"/addProjectGroup\", {\n      params: { projectId, groupId },\n    })\n    .then(responseHandler);\n};\n\nexport const removeProjectManager = async (projectId, managerId) => {\n  return request\n    .delete(requestMapping + \"/removeProjectManager\", {\n      params: { projectId, managerId },\n    })\n    .then(responseHandler);\n};\n\nexport const removeProjectGroup = async (projectId, groupId) => {\n  return request\n    .delete(requestMapping + \"/removeProjectGroup\", {\n      params: { projectId, groupId },\n    })\n    .then(responseHandler);\n};\n\nexport const getAvailableGroup = async () => {\n  return request\n    .get(requestMapping + \"/getAvailableGroup\")\n    .then(responseHandler);\n};\n\nexport const getGroupMember = async (groupId) => {\n  return request\n    .get(requestMapping + \"/getGroupMember\", {\n      params: { groupId },\n    })\n    .then(responseHandler);\n};\n\nexport const addGroupMember = async (groupId, userId) => {\n  return request\n    .get(requestMapping + \"/addGroupMember\", {\n      params: { groupId, userId },\n    })\n    .then(responseHandler);\n};\n\nexport const removeGroupMember = async (groupId, userId) => {\n  return request\n    .delete(requestMapping + \"/removeGroupMember\", {\n      params: { groupId, userId },\n    })\n    .then(responseHandler);\n};\n\nexport const getSummary = async () => {\n  return request.get(requestMapping + \"/getSummary\").then(responseHandler);\n};\n\nexport const getMyApproval = async (query) => {\n  return request\n    .get(requestMapping + \"/getMyApproval\", { params: { ...query } })\n    .then(responseHandler);\n};\n\nexport const approve = async (approvalId) => {\n  return request\n    .get(requestMapping + \"/approve\", { params: { approvalId } })\n    .then(responseHandler);\n};\n\nexport const reject = async (approvalId) => {\n  return request\n    .get(requestMapping + \"/reject\", { params: { approvalId } })\n    .then(responseHandler);\n};\nexport const readNotification = async (messageId) => {\n  return request\n    .get(requestMapping + \"/readNotification\", { params: { messageId } })\n    .then(responseHandler);\n};\n\nexport const getNotifications = async () => {\n  return request\n    .get(requestMapping + \"/getNotifications\")\n    .then(responseHandler);\n};\n\nexport const getMessages = async (senderId, minId) => {\n  return request\n    .get(requestMapping + \"/getMessages\", { params: { senderId, minId } })\n    .then(responseHandler);\n};\n\nexport const sendMessage = async (message) => {\n  return request\n    .post(requestMapping + \"/sendMessage\", message)\n    .then(responseHandler);\n};\n\nexport const getUserInfo = async (userId) => {\n  return request\n    .get(requestMapping + \"/getUserInfo\", { params: { userId } })\n    .then(responseHandler);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}