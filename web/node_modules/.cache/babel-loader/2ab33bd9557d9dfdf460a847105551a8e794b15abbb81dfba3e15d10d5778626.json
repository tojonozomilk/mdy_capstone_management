{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getProjectDetail, getAvailableGroup, addProjectManager, addProjectGroup, removeProjectManager, removeProjectGroup } from '@/api/FrontAPI';\nimport { errorHandler } from '@/utils/RequestUtils';\nimport { getAllUserId } from '@/api/UserAPI';\nimport { saveProject, deleteProject } from '@/api/ProjectAPI';\nimport UserChat from '@/components/message/UserChat.vue';\nexport default {\n  name: \"ProjectDetail\",\n  components: {\n    UserChat\n  },\n  data() {\n    return {\n      id: 0,\n      name: 'title',\n      description: 'description',\n      role: sessionStorage.getItem('role'),\n      groupList: [],\n      managerList: [],\n      data: {\n        id: null,\n        name: 'title',\n        description: 'description',\n        creatorId: '',\n        category: '',\n        createDate: '',\n        amendDate: '',\n        groupList: [],\n        managerList: []\n      }\n    };\n  },\n  created() {\n    this.id = this.$route.params.id;\n    console.log(this.id);\n    this.onInit();\n  },\n  methods: {\n    onInit() {\n      if (this.id == 0) {\n        getAllUserId().then(res => {\n          const managerIdList = this.data.managerList.map(item => item.value);\n          this.managerList = res.filter(item => !managerIdList.includes(item.value));\n        }).catch(errorHandler);\n        getAvailableGroup().then(res => {\n          this.groupList = res;\n        }).catch(errorHandler);\n        return;\n      }\n      getProjectDetail(this.id).then(res => {\n        this.data = res;\n        this.name = res.name;\n        this.description = res.description;\n        getAllUserId().then(res => {\n          const managerIdList = this.data.managerList.map(item => item.value);\n          this.managerList = res.filter(item => !managerIdList.includes(item.value));\n        }).catch(errorHandler);\n        getAvailableGroup().then(res => {\n          this.groupList = res;\n        }).catch(errorHandler);\n      }).catch(errorHandler);\n    },\n    onUpdate(e, field) {\n      this.data[field] = event.target.innerHTML;\n    },\n    onSave() {\n      saveProject(this.data).then(res => {\n        if (this.id == 0) {\n          this.$router.push('/project/' + res.id);\n          this.id = res.id;\n        }\n        this.$message.success(\"Change saved successfully\");\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    onChangeCategory(category) {\n      this.data.category = category;\n      this.onSave();\n    },\n    onDelete() {\n      deleteProject(this.data.id).then(() => {\n        this.$message.success(\"Change deleted successfully\");\n        this.$router.push('/projects');\n      }).catch(errorHandler);\n    },\n    onInviteManager(managerId) {\n      addProjectManager(this.data.id, managerId).then(() => {\n        this.$message.success(\"Manager added successfully\");\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    onInviteGroup(groupId) {\n      addProjectGroup(this.data.id, groupId).then(() => {\n        this.$message.success(\"Group added successfully\");\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    onDeleteManager(managerId) {\n      removeProjectManager(this.data.id, managerId).then(() => {\n        this.$message.success(\"Manager removed successfully\");\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    onDeleteGroup(groupId) {\n      removeProjectGroup(this.data.id, groupId).then(() => {\n        this.$message.success(\"Group removed successfully\");\n        this.onInit();\n      }).catch(errorHandler);\n    },\n    getEditable() {\n      return this.id == 0 || this.data.managerList.find(item => item.value == sessionStorage.getItem('userId'));\n    },\n    onCancel() {\n      this.$router.push('/projects');\n    }\n  }\n};","map":{"version":3,"names":["getProjectDetail","getAvailableGroup","addProjectManager","addProjectGroup","removeProjectManager","removeProjectGroup","errorHandler","getAllUserId","saveProject","deleteProject","UserChat","name","components","data","id","description","role","sessionStorage","getItem","groupList","managerList","creatorId","category","createDate","amendDate","created","$route","params","console","log","onInit","methods","then","res","managerIdList","map","item","value","filter","includes","catch","onUpdate","e","field","event","target","innerHTML","onSave","$router","push","$message","success","onChangeCategory","onDelete","onInviteManager","managerId","onInviteGroup","groupId","onDeleteManager","onDeleteGroup","getEditable","find","onCancel"],"sources":["src/views/ProjectDetailView.vue"],"sourcesContent":["<template>\r\n    <el-card class=\"box-card\">\r\n        <div slot=\"header\" class=\"clearfix\">\r\n            <span :contenteditable=\"getEditable()\" class=\"editable\" @blur=\"onSave\" v-html=\"name\" @keydown.enter.prevent\r\n                @input=\"(e) => onUpdate(e, 'name')\" />\r\n            <el-button slot=\"reference\" style=\"float: right; padding: 3px\" type=\"danger\" @click=\"onCancel\"\r\n                icon=\"el-icon-close\" />\r\n            <el-popconfirm v-if=\"id != 0 && getEditable()\" confirm-button-text='yes' cancel-button-text='no'\r\n                title=\"Are you sure?\" @confirm=\"onDelete\">\r\n                <el-button slot=\"reference\" style=\"float: right; padding: 3px;margin-right:10px\" type=\"danger\"\r\n                    icon=\"el-icon-delete\" />\r\n            </el-popconfirm>\r\n        </div>\r\n        <el-row class=\"project-detail\">\r\n            <el-col :span=\"17\">\r\n                <div :contenteditable=\"getEditable()\" class=\"editable\" @blur=\"onSave\" v-html=\"description\"\r\n                    @input=\"(e) => onUpdate(e, 'description')\" />\r\n            </el-col>\r\n            <el-col :span=\"1\"><br /></el-col>\r\n            <el-col :span=\"6\">\r\n                <el-descriptions title=\"Detail\" column=\"2\">\r\n                    <template slot=\"extra\" v-if=\"id != 0\">\r\n                        <el-popover placement=\"bottom\" trigger=\"click\" class=\"invite-selector\" v-if=\"getEditable()\">\r\n                            <el-select filterable placeholder=\"Please select manager\" @change=\"onInviteManager\">\r\n                                <el-option v-for=\"item in managerList\" :key=\"item.value\" :label=\"item.label\"\r\n                                    :value=\"item.value\">\r\n                                </el-option>\r\n                            </el-select>\r\n                            <el-button slot=\"reference\" type=\"primary\" size=\"mini\" icon=\"el-icon-plus\" plain />\r\n                        </el-popover>\r\n                        <el-popover placement=\"bottom\" trigger=\"click\" class=\"invite-selector\">\r\n                            <el-select filterable placeholder=\"Please select group\" @change=\"onInviteGroup\">\r\n                                <el-option v-for=\"item in groupList\" :key=\"item.value\" :label=\"item.label\"\r\n                                    :value=\"item.value\">\r\n                                </el-option>\r\n                            </el-select>\r\n                            <el-button slot=\"reference\" type=\"warning\" size=\"mini\" icon=\"el-icon-plus\" plain />\r\n                        </el-popover>\r\n                    </template>\r\n                    <el-descriptions-item label=\"Creator\">{{ data.managerList.filter(item => item.value ===\r\n                        data.creatorId)?.[0]?.label }}</el-descriptions-item>\r\n                    <el-descriptions-item label=\"Category\">\r\n                        <el-select v-if=\"getEditable()\" v-model=\"data.category\" placeholder=\"Please select\" size=\"mini\"\r\n                            @change=\"onChangeCategory\">\r\n                            <el-option label=\"Research\" value=\"Research\" />\r\n                            <el-option label=\"Application\" value=\"Application\" />\r\n                        </el-select>\r\n                        <span v-else>{{ data.category }}</span>\r\n                    </el-descriptions-item>\r\n                    <el-descriptions-item label=\"Create Date\">{{ data.createDate }}</el-descriptions-item>\r\n                    <el-descriptions-item label=\"Amend Date\">{{ data.amendDate }}</el-descriptions-item>\r\n                </el-descriptions>\r\n                <el-descriptions>\r\n                    <el-descriptions-item label=\"Managers\">\r\n                        <div>\r\n                            <el-tag v-for=\"manager in data.managerList\" :key=\"manager\" size=\"small\"\r\n                                :closable=\"manager.value != data.creatorId && getEditable()\"\r\n                                @close=\"() => onDeleteManager(manager.value)\" class=\"items-icon\">\r\n                                <UserChat :userId=\"manager.value\" :username=\"manager.label\" />\r\n                            </el-tag>\r\n                        </div>\r\n                    </el-descriptions-item>\r\n                </el-descriptions>\r\n                <el-descriptions>\r\n                    <el-descriptions-item label=\"Groups\">\r\n                        <div>\r\n                            <el-tag size=\"small\" type=\"warning\" :closable=\"getEditable()\"\r\n                                v-for=\"group in data.groupList\" :key=\"group\" @close=\"() => onDeleteGroup(group.value)\"\r\n                                class=\"items-icon\">\r\n                                <UserChat :userId=\"group.value\" :username=\"group.label\" />\r\n                            </el-tag>\r\n                        </div>\r\n                    </el-descriptions-item>\r\n                </el-descriptions>\r\n            </el-col>\r\n        </el-row>\r\n    </el-card>\r\n</template>\r\n\r\n<script>\r\nimport { getProjectDetail, getAvailableGroup, addProjectManager, addProjectGroup, removeProjectManager, removeProjectGroup } from '@/api/FrontAPI';\r\nimport { errorHandler } from '@/utils/RequestUtils';\r\nimport { getAllUserId } from '@/api/UserAPI';\r\nimport { saveProject, deleteProject } from '@/api/ProjectAPI';\r\nimport UserChat from '@/components/message/UserChat.vue'\r\nexport default {\r\n    name: \"ProjectDetail\",\r\n    components: { UserChat },\r\n    data() {\r\n        return {\r\n            id: 0,\r\n            name: 'title',\r\n            description: 'description',\r\n            role: sessionStorage.getItem('role'),\r\n            groupList: [],\r\n            managerList: [],\r\n            data: {\r\n                id: null,\r\n                name: 'title',\r\n                description: 'description',\r\n                creatorId: '',\r\n                category: '',\r\n                createDate: '',\r\n                amendDate: '',\r\n                groupList: [],\r\n                managerList: [],\r\n            }\r\n        };\r\n    },\r\n    created() {\r\n        this.id = this.$route.params.id\r\n        console.log(this.id)\r\n        this.onInit();\r\n    },\r\n    methods: {\r\n        onInit() {\r\n            if (this.id == 0) {\r\n                getAllUserId()\r\n                    .then(res => {\r\n                        const managerIdList = this.data.managerList.map(item => item.value)\r\n                        this.managerList = res.filter(item => !managerIdList.includes(item.value))\r\n                    })\r\n                    .catch(errorHandler);\r\n                getAvailableGroup()\r\n                    .then(res => {\r\n                        this.groupList = res\r\n                    })\r\n                    .catch(errorHandler);\r\n                return\r\n            }\r\n            getProjectDetail(this.id)\r\n                .then((res) => {\r\n                    this.data = res;\r\n                    this.name = res.name;\r\n                    this.description = res.description;\r\n\r\n                    getAllUserId()\r\n                        .then(res => {\r\n                            const managerIdList = this.data.managerList.map(item => item.value)\r\n                            this.managerList = res.filter(item => !managerIdList.includes(item.value))\r\n                        })\r\n                        .catch(errorHandler);\r\n                    getAvailableGroup()\r\n                        .then(res => {\r\n                            this.groupList = res\r\n                        })\r\n                        .catch(errorHandler);\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onUpdate(e, field) {\r\n            this.data[field] = event.target.innerHTML;\r\n        },\r\n        onSave() {\r\n            saveProject(this.data)\r\n                .then((res) => {\r\n                    if (this.id == 0) {\r\n                        this.$router.push('/project/' + res.id)\r\n                        this.id = res.id\r\n                    }\r\n                    this.$message.success(\"Change saved successfully\")\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onChangeCategory(category) {\r\n            this.data.category = category\r\n            this.onSave()\r\n        },\r\n        onDelete() {\r\n            deleteProject(this.data.id)\r\n                .then(() => {\r\n                    this.$message.success(\"Change deleted successfully\")\r\n                    this.$router.push('/projects')\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onInviteManager(managerId) {\r\n            addProjectManager(this.data.id, managerId)\r\n                .then(() => {\r\n                    this.$message.success(\"Manager added successfully\")\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onInviteGroup(groupId) {\r\n            addProjectGroup(this.data.id, groupId)\r\n                .then(() => {\r\n                    this.$message.success(\"Group added successfully\")\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        onDeleteManager(managerId) {\r\n            removeProjectManager(this.data.id, managerId)\r\n                .then(() => {\r\n                    this.$message.success(\"Manager removed successfully\")\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n\r\n        },\r\n        onDeleteGroup(groupId) {\r\n            removeProjectGroup(this.data.id, groupId)\r\n                .then(() => {\r\n                    this.$message.success(\"Group removed successfully\")\r\n                    this.onInit()\r\n                })\r\n                .catch(errorHandler)\r\n        },\r\n        getEditable() {\r\n            return this.id == 0 || this.data.managerList.find(item => item.value == sessionStorage.getItem('userId'))\r\n        },\r\n        onCancel() {\r\n            this.$router.push('/projects')\r\n        }\r\n    },\r\n};\r\n</script>\r\n\r\n<style>\r\n.box-card {\r\n    height: 98%;\r\n}\r\n\r\n.editable {\r\n    background-color: transparent;\r\n    border: none;\r\n    padding: 0;\r\n    outline: none;\r\n}\r\n\r\n.project-detail {\r\n    margin-left: 20px;\r\n    margin-right: 20px;\r\n}\r\n\r\n.items-icon {\r\n    margin: 5px;\r\n}\r\n\r\n.invite-selector {\r\n    margin-right: 5px;\r\n}\r\n</style>"],"mappings":";AAgFA,SAAAA,gBAAA,EAAAC,iBAAA,EAAAC,iBAAA,EAAAC,eAAA,EAAAC,oBAAA,EAAAC,kBAAA;AACA,SAAAC,YAAA;AACA,SAAAC,YAAA;AACA,SAAAC,WAAA,EAAAC,aAAA;AACA,OAAAC,QAAA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAF;EAAA;EACAG,KAAA;IACA;MACAC,EAAA;MACAH,IAAA;MACAI,WAAA;MACAC,IAAA,EAAAC,cAAA,CAAAC,OAAA;MACAC,SAAA;MACAC,WAAA;MACAP,IAAA;QACAC,EAAA;QACAH,IAAA;QACAI,WAAA;QACAM,SAAA;QACAC,QAAA;QACAC,UAAA;QACAC,SAAA;QACAL,SAAA;QACAC,WAAA;MACA;IACA;EACA;EACAK,QAAA;IACA,KAAAX,EAAA,QAAAY,MAAA,CAAAC,MAAA,CAAAb,EAAA;IACAc,OAAA,CAAAC,GAAA,MAAAf,EAAA;IACA,KAAAgB,MAAA;EACA;EACAC,OAAA;IACAD,OAAA;MACA,SAAAhB,EAAA;QACAP,YAAA,GACAyB,IAAA,CAAAC,GAAA;UACA,MAAAC,aAAA,QAAArB,IAAA,CAAAO,WAAA,CAAAe,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,KAAA;UACA,KAAAjB,WAAA,GAAAa,GAAA,CAAAK,MAAA,CAAAF,IAAA,KAAAF,aAAA,CAAAK,QAAA,CAAAH,IAAA,CAAAC,KAAA;QACA,GACAG,KAAA,CAAAlC,YAAA;QACAL,iBAAA,GACA+B,IAAA,CAAAC,GAAA;UACA,KAAAd,SAAA,GAAAc,GAAA;QACA,GACAO,KAAA,CAAAlC,YAAA;QACA;MACA;MACAN,gBAAA,MAAAc,EAAA,EACAkB,IAAA,CAAAC,GAAA;QACA,KAAApB,IAAA,GAAAoB,GAAA;QACA,KAAAtB,IAAA,GAAAsB,GAAA,CAAAtB,IAAA;QACA,KAAAI,WAAA,GAAAkB,GAAA,CAAAlB,WAAA;QAEAR,YAAA,GACAyB,IAAA,CAAAC,GAAA;UACA,MAAAC,aAAA,QAAArB,IAAA,CAAAO,WAAA,CAAAe,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,KAAA;UACA,KAAAjB,WAAA,GAAAa,GAAA,CAAAK,MAAA,CAAAF,IAAA,KAAAF,aAAA,CAAAK,QAAA,CAAAH,IAAA,CAAAC,KAAA;QACA,GACAG,KAAA,CAAAlC,YAAA;QACAL,iBAAA,GACA+B,IAAA,CAAAC,GAAA;UACA,KAAAd,SAAA,GAAAc,GAAA;QACA,GACAO,KAAA,CAAAlC,YAAA;MACA,GACAkC,KAAA,CAAAlC,YAAA;IACA;IACAmC,SAAAC,CAAA,EAAAC,KAAA;MACA,KAAA9B,IAAA,CAAA8B,KAAA,IAAAC,KAAA,CAAAC,MAAA,CAAAC,SAAA;IACA;IACAC,OAAA;MACAvC,WAAA,MAAAK,IAAA,EACAmB,IAAA,CAAAC,GAAA;QACA,SAAAnB,EAAA;UACA,KAAAkC,OAAA,CAAAC,IAAA,eAAAhB,GAAA,CAAAnB,EAAA;UACA,KAAAA,EAAA,GAAAmB,GAAA,CAAAnB,EAAA;QACA;QACA,KAAAoC,QAAA,CAAAC,OAAA;QACA,KAAArB,MAAA;MACA,GACAU,KAAA,CAAAlC,YAAA;IACA;IACA8C,iBAAA9B,QAAA;MACA,KAAAT,IAAA,CAAAS,QAAA,GAAAA,QAAA;MACA,KAAAyB,MAAA;IACA;IACAM,SAAA;MACA5C,aAAA,MAAAI,IAAA,CAAAC,EAAA,EACAkB,IAAA;QACA,KAAAkB,QAAA,CAAAC,OAAA;QACA,KAAAH,OAAA,CAAAC,IAAA;MACA,GACAT,KAAA,CAAAlC,YAAA;IACA;IACAgD,gBAAAC,SAAA;MACArD,iBAAA,MAAAW,IAAA,CAAAC,EAAA,EAAAyC,SAAA,EACAvB,IAAA;QACA,KAAAkB,QAAA,CAAAC,OAAA;QACA,KAAArB,MAAA;MACA,GACAU,KAAA,CAAAlC,YAAA;IACA;IACAkD,cAAAC,OAAA;MACAtD,eAAA,MAAAU,IAAA,CAAAC,EAAA,EAAA2C,OAAA,EACAzB,IAAA;QACA,KAAAkB,QAAA,CAAAC,OAAA;QACA,KAAArB,MAAA;MACA,GACAU,KAAA,CAAAlC,YAAA;IACA;IACAoD,gBAAAH,SAAA;MACAnD,oBAAA,MAAAS,IAAA,CAAAC,EAAA,EAAAyC,SAAA,EACAvB,IAAA;QACA,KAAAkB,QAAA,CAAAC,OAAA;QACA,KAAArB,MAAA;MACA,GACAU,KAAA,CAAAlC,YAAA;IAEA;IACAqD,cAAAF,OAAA;MACApD,kBAAA,MAAAQ,IAAA,CAAAC,EAAA,EAAA2C,OAAA,EACAzB,IAAA;QACA,KAAAkB,QAAA,CAAAC,OAAA;QACA,KAAArB,MAAA;MACA,GACAU,KAAA,CAAAlC,YAAA;IACA;IACAsD,YAAA;MACA,YAAA9C,EAAA,cAAAD,IAAA,CAAAO,WAAA,CAAAyC,IAAA,CAAAzB,IAAA,IAAAA,IAAA,CAAAC,KAAA,IAAApB,cAAA,CAAAC,OAAA;IACA;IACA4C,SAAA;MACA,KAAAd,OAAA,CAAAC,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}